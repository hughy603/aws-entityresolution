[tool.poetry]
name = "aws-entity-resolution"
version = "1.0.0"
description = "AWS Entity Resolution pipeline for creating golden records from Snowflake data"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [{include = "aws_entity_resolution", from = "src"}]

[tool.poetry.dependencies]
python = "^3.12"
boto3 = "^1.34.0"
snowflake-connector-python = "^3.6.0"
pydantic = "^2.5.0"
python-dotenv = "^1.0.0"
typer = "^0.10.0"
pydantic-settings = "^2.8.1"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
ruff = "^0.3.0"
mypy = "^1.7.0"
black = "^23.11.0"
pre-commit = "^3.5.0"
moto = {extras = ["s3"], version = "^5.1.1"}
bandit = {extras = ["toml"], version = "^1.8.3"}
pytest-env = "0.8.2"
pandas = "^2.2.3"
pyarrow = "<19.0.0"
numpy = "<2.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
# Main CLI command
entity-resolution = "aws_entity_resolution.cli.main:app"
aws-entity-resolution = "aws_entity_resolution.cli.main:app"

# Direct CLI access to the components
er-process = "aws_entity_resolution.cli.commands.processor:app"
er-load = "aws_entity_resolution.cli.commands.loader:app"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
addopts = [
    "--verbose",
    "--import-mode=importlib",
    "--strict-markers",
    "--strict-config",
    "--cov=src/aws_entity_resolution",
    "--cov-report=term-missing",
    "--cov-report=xml:coverage.xml",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=80",
    "-ra",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks integration tests",
    "unit: marks unit tests",
]
env_files = [".env.test"]
env_override_existing_values = false
pythonpath = ["src"]

[tool.coverage.run]
branch = true
source = ["src/aws_entity_resolution"]
omit = [
    "tests/*",
    "**/__init__.py",
    "**/cli/*",
    "**/config/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "\\.\\.\\.",
]
fail_under = 80
show_missing = true

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.ruff]
# Allow imports relative to the "src" and "app" directories.
src = ["src", "app", "tests"]
# Target Python versions
target-version = "py310"
line-length = 100
select = [
    "E",     # pycodestyle errors
    "F",     # pyflakes
    "I",     # isort
    "N",     # pep8-naming
    "UP",    # pyupgrade
    "YTT",   # flake8-2020
    "C",     # complexity
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "COM",   # flake8-commas
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "T10",   # flake8-debugger
    "DJ",    # flake8-django
    "EM",    # flake8-errmsg
    "EXE",   # flake8-executable
    "ISC",   # flake8-implicit-str-concat
    "ICN",   # flake8-import-conventions
    "G",     # flake8-logging-format
    "INP",   # flake8-no-pep420
    "PIE",   # flake8-pie
    "PYI",   # flake8-pyi
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "SLF",   # flake8-self
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
    "ERA",   # eradicate
    "PD",    # pandas-vet
    "PGH",   # pygrep-hooks
    "PLR",   # pylint rules
    "PLW",   # pylint warnings
    "TRY",   # tryceratops
    "FLY",   # flynt
    "NPY",   # NumPy-specific rules
    "RUF",   # ruff-specific rules
    "ANN",   # flake8-annotations
    "BLE",   # flake8-blind-except
    "S"      # flake8-bandit
]
ignore = [
    "E203",  # space before : (needed for black formatting)
    "E501",  # line too long
    "B006",  # mutable-argument-default
    "B008",  # function-call-argument-default
    "N803",  # argument-name-should-be-lowercase (snake_case) - for cls etc.
    "N806",  # variable-name-should-be-lowercase (snake_case) - for non-constants
    "N812",  # lowercase-imported-as-non-lowercase - conflicts with some common imports
    "N815",  # mixed-case variable in class scope
    "N817",  # camelcase import as lowercase
    "PLR0911",  # too-many-return-statements
    "PLR0912",  # too-many-branches
    "PLR0913",  # too-many-arguments
    "PLR0915",  # too-many-statements
    "PLR2004",  # magic-value-comparison
    "PLW0603",  # global-statement
    "PTH118",  # os.makedirs-exist-ok - replacing with pathlib not always clearer
    "TRY003",  # long-exception-message
    "PD901",   # df is a bad variable name - disagree in many contexts
    "B011",    # don't use assert statements
    "B007",    # Loop control variable not used within the loop body
    "PLW0120",  # useless-else-on-loop
    "PLW0127",  # self-assignment - sometimes used to trigger signals
    "ANN002",  # Missing type annotation for *args
    "ANN003",  # Missing type annotation for **kwargs
    "ANN401",  # Allow Any type
    "PLR0133",  # Ignore type with Any
    "PLR1714",  # Ignore unique in lists comparisons
    "PLR5501",  # Ignore collapsible if statements
    "UP007",    # Ignore Union[X, Y] vs X | Y - needed for Typer compatibility
    "D107",     # Missing docstring in __init__ (from pylint C0111)
    "D100",     # Missing module docstring (from pylint C0111)
    "D101",     # Missing class docstring (from pylint C0111)
    "D102",     # Missing method docstring (from pylint C0111)
    "D103",     # Missing function docstring (from pylint C0111)
    "SIM101",   # Similar lines in different files (duplicate code from pylint R0801)
    "G004",     # Logging with f-string (for better compatibility with structured logging)
    "PLR0904"   # Too many public methods (from pylint R0903)
]
# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "terraform",
    "scripts",
    "docs"
]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.mccabe]
max-complexity = 12

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "lf"  # Ensure LF line endings as specified in pylintrc

[tool.ruff.lint.isort]
known-first-party = ["aws_entity_resolution"]
known-third-party = ["boto3", "snowflake", "pydantic", "typer", "pytest", "moto"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.lint.pyflakes]
# Enable recognition of dynamically generated members (like pandas and numpy)
extend-generics = [
    "numpy.ndarray",
    "pandas.DataFrame",
    "pandas.Series",
    "torch.Tensor",
    "sklearn.pipeline.Pipeline",
]

[tool.ruff.per-file-ignores]
"tests/*" = [
    "S101",   # Use of assert
    "ARG001", # Unused function argument
    "TID252", # Relative imports from parent modules
    "S105",   # Hard-coded password
    "S106",   # Hard-coded password
    "S107",   # Hard-coded password
    "ARG005", # Unused lambda argument
    "E712",   # Comparison with True/False
    "S301",   # pickle usage
    "D",      # Ignore all documentation-related issues in tests
    "E731",   # Do not assign a lambda expression, use a def
    "F401",   # Allow unused imports in tests
    "F841",   # Allow unused variables in tests
    "UP035",  # Allow deprecated typing in tests
    "ANN201", # Allow missing return type annotations in tests
    "D100",   # Allow missing docstrings in tests
    "D103"    # Allow missing function docstrings in tests
]
"conftest.py" = ["S101", "ARG001", "D", "ANN001", "S105", "S106"]
"**/cli.py" = ["B008", "D401", "C901", "F401", "ANN001"]
"src/*/__init__.py" = ["F401", "D104"]
"src/aws_entity_resolution/**/__main__.py" = ["E402"]
"**/__init__.py" = ["D104", "F401"]
"terraform/**/*.py" = [
    "ANN",    # Ignore all annotation requirements
    "D",      # Ignore all docstring requirements
    "S101",   # Allow assert statements
    "E501"    # Ignore line length issues
]
"scripts/**/*.py" = [
    "ANN",    # Ignore all annotation requirements
    "D",      # Ignore all docstring requirements
]
"tests/__init__.py" = ["D104"]
"src/aws_entity_resolution/processor/cli.py" = [
    "ANN001", # Allow missing parameter type annotations
    "ANN201", # Allow missing return type annotations
    "E501",   # Allow long lines
    "F841"    # Allow unused variables
]
"src/aws_entity_resolution/loader/cli.py" = [
    "ANN001", # Allow missing parameter type annotations
    "ANN201", # Allow missing return type annotations
    "D100",   # Allow missing module docstring
    "E402",   # Allow imports not at top of file
    "C901"    # Allow complex functions
]
"src/aws_entity_resolution/config/__init__.py" = [
    "F401",   # Allow unused imports
    "ANN401", # Allow Any type
    "C901",   # Allow complex functions
    "PLR0124", # Allow comparison to itself
    "PLR0133"  # Allow comparison to itself
]
"src/aws_entity_resolution/lambda_handlers.py" = [
    "UP035",  # Allow typing.Dict instead of dict
    "ANN401"  # Allow Any type
]
"src/aws_entity_resolution/utils.py" = [
    "UP035",  # Allow typing.Dict instead of dict
    "ANN401"  # Allow Any type
]
"src/aws_entity_resolution/loader/loader.py" = [
    "PLR0124", # Allow comparison to itself
    "PLR0133", # Allow comparison to Any
    "C901",    # Allow complex functions
    "ANN003"   # Allow missing kwarg type annotations
]
"src/aws_entity_resolution/loader/loader.py:255" = ["BLE001"]  # Ignore BLE001 for the load_records function's final exception handler

[tool.black]
line-length = 100
target-version = ["py39"]
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true  # Require type annotations
explicit_package_bases = true
namespace_packages = true
disallow_incomplete_defs = false  # Allow partial type annotations
check_untyped_defs = true  # Still type check functions without annotations
strict_optional = true  # Enable strict handling of Optional/None

# Allow test files to have untyped definitions
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# Add these configurations
ignore_missing_imports = true    # Ignore missing stubs for external packages
disable_error_code = ["no-any-return", "var-annotated", "assignment", "no-untyped-def"]  # Disable less critical error codes

# Module-specific ignores
[[tool.mypy.overrides]]
module = "snowflake.connector.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "boto3.*"
ignore_missing_imports = true


[[tool.mypy.overrides]]
module = "terraform.modules.lambda-functions.process.handler"
ignore_errors = true

[[tool.mypy.overrides]]
module = "terraform.modules.lambda-functions.load.handler"
ignore_errors = true

[[tool.mypy.overrides]]
module = "terraform.modules.lambda-functions.notify.handler"
ignore_errors = true

# Add exclusions for specific files that may have similar issues
[[tool.mypy.overrides]]
module = "terraform.*"
ignore_errors = true

[tool.bandit]
exclude_dirs = ["tests", "docs", ".venv"]
# Add more skips for non-serious issues
skips = [
    "B101",  # Skip assert statements
    "B104",  # Hardcoded bind addresses for tests
    "B110",  # Try-except-pass patterns in specific cases
    "B311",  # Random not used for security/crypto
    "B603",  # subprocess with shell=True where needed
    "B607",  # Start process with a partial path
]
target-version = "py312"
