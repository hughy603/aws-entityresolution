# Ruff linter configuration
# https://docs.astral.sh/ruff/configuration/

# Max line length
line-length = 100

# Allow imports relative to the "src" and "app" directories.
src = ["src", "app", "tests"]

# Target Python versions
target-version = "py310"

[lint]
# Select rule set to enable
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "B",   # flake8-bugbear
    "I",   # isort
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "S",   # flake8-bandit
    "BLE", # flake8-blind-except
    "A",   # flake8-builtins
    "C90", # mccabe complexity
    "ANN", # flake8-annotations (keep for compatibility)
    "N",   # pep8-naming
    "D",   # pydocstyle
]

# Ignore rules
ignore = [
    "S101",   # Allow assert statements in tests
    "ANN401", # Allow Any type
    "PLR0913", # Ignore too many arguments
    "PLR0912", # Ignore too many branches
    "PLR0915", # Ignore too many statements
    "PLR2004", # Ignore magic numbers in arguments
    "PLR0133", # Ignore type with Any
    "PLR1714", # Ignore unique in lists comparisons
    "PLR5501", # Ignore collapsible if statements
    "UP007",   # Ignore Union[X, Y] vs X | Y - needed for Typer compatibility
]

# Never try to fix these
unfixable = [
    "F401",  # Unused imports
    "F841",  # Unused variables
]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[lint.per-file-ignores]
# Ignore specific rules for test files
"tests/*" = [
    "S101",   # Allow assert statements in tests
    "ANN201", # Allow missing return type annotations in tests
    "D100",   # Allow missing docstrings in tests
    "D103",   # Allow missing function docstrings in tests
    "ANN001", # Allow missing parameter type annotations in tests
    "S105",   # Allow hardcoded passwords in tests
    "S106",   # Allow hardcoded passwords in tests
]

# Ignore missing docstrings in any __init__.py files
"**/__init__.py" = [
    "D104",   # Allow missing docstrings in package init
    "F401",   # Allow unused imports in __init__ files
]

# Ignore specific rules for conftest.py
"conftest.py" = [
    "S101",   # Allow assert statements in tests
    "ANN001", # Allow missing parameter type annotations
    "S105",   # Allow hardcoded passwords in tests
    "S106",   # Allow hardcoded passwords in tests
]

# Ignore specific rules for source files with known issues
"src/aws_entity_resolution/config/__init__.py" = [
    "F401",   # Allow unused imports
    "ANN401", # Allow Any type
    "C901",   # Allow complex functions
]

"src/aws_entity_resolution/lambda_handlers.py" = [
    "UP035",  # Allow typing.Dict instead of dict
    "F401",   # Allow unused imports
    "ANN401", # Allow Any type
]

"src/aws_entity_resolution/utils.py" = [
    "UP035",  # Allow typing.Dict instead of dict
    "F401",   # Allow unused imports
    "ANN401", # Allow Any type
]

"src/aws_entity_resolution/services.py" = [
    "F401",   # Allow unused imports
    "ANN201", # Allow missing return type
    "ANN001", # Allow missing parameter type annotations
]

"src/aws_entity_resolution/extractor/extractor.py" = [
    "F401",   # Allow unused imports
    "S608",   # Allow SQL string formatting
]

"src/aws_entity_resolution/loader/loader.py" = [
    "F401",   # Allow unused imports
    "S608",   # Allow SQL string formatting
    "BLE001", # Allow blind except
]

"src/aws_entity_resolution/cli.py" = [
    "F401",   # Allow unused imports
    "BLE001", # Allow blind except
]

"src/*/__init__.py" = [
    "D104",   # Allow missing docstrings in init files
]

# Ignore specific rules for terraform and script files
"terraform/**/*.py" = [
    "ANN",    # Ignore all annotation requirements
    "D",      # Ignore all docstring requirements
    "S101",   # Allow assert statements
    "S103",   # Allow chmod with hardcoded file modes
    "BLE001", # Allow blind except statements
    "E501",   # Ignore line length issues
]

"scripts/**/*.py" = [
    "ANN",    # Ignore all annotation requirements
    "D",      # Ignore all docstring requirements
    "S103",   # Allow chmod with hardcoded file modes
    "BLE001", # Allow blind except statements
]

"src/aws_entity_resolution/extractor/database.py" = [
    "F401",   # Allow unused imports
]

"tests/__init__.py" = [
    "D104",   # Allow missing docstrings in init files
]

# Update ignores for CLI files that use Typer
"src/aws_entity_resolution/extractor/cli.py" = [
    "F401",   # Allow unused imports
    "BLE001", # Allow blind except
    "ANN001", # Allow missing parameter type annotations
    "ANN201", # Allow missing return type annotations
    "B904",   # Allow raising exceptions without from clause
]

"src/aws_entity_resolution/processor/cli.py" = [
    "F401",   # Allow unused imports
    "BLE001", # Allow blind except
    "ANN001", # Allow missing parameter type annotations
    "ANN201", # Allow missing return type annotations
    "E501",   # Allow long lines
    "F841",   # Allow unused variables
]

"src/aws_entity_resolution/loader/cli.py" = [
    "F401",   # Allow unused imports
    "BLE001", # Allow blind except
    "ANN001", # Allow missing parameter type annotations
    "ANN201", # Allow missing return type annotations
    "D100",   # Allow missing module docstring
    "E402",   # Allow imports not at top of file
    "C901",   # Allow complex functions
]

[lint.mccabe]
# Max complexity allowed
max-complexity = 12

[lint.pydocstyle]
# Use Google-style docstrings.
convention = "google"

[format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
